// --------------------<optimizations>--------------------
#pragma GCC optimize("O3")
#pragma comment(linker, "/stack:200000000")
#pragma GCC optimize("unroll-loops")
// -------------------</optimizations>--------------------
#include<bits/stdc++.h>
#define ll long long
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp> 
// #include <ext/pb_ds/tree_policy.hpp> //lower_bound , upper_bound
// using namespace __gnu_pbds;//kth smallest : *pd.find_by_order(k-1) , no. of elem < X : pd.order_of_key(X) , delete X : pd.erase(X).
// typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;
#define f(i,a,b) for(ll i=a;i<b;i++)
#define fb(i,a,b) for(ll i=a;i>=b;i--)
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define nl '\n'
#define pl pair<ll,ll>
#define all(v) v.begin(),v.end()
const ll mod=(1e+9)+7;
const ll sz = 2e5+9;
ll gcd(ll a,ll b) {if(b==0)return a;return gcd(b,a%b);}
ll power(ll a,ll b,ll m = mod) {ll res = 1;while(b>0){if(b&1)res = (res*a)%m;b = b>>1;a = (a*a)%m;}return res;}

struct node 
{
    int data;
    struct node *l,*r;
}*temp=NULL,*nn=NULL,*head=NULL,*y=NULL;

void inord(struct node* tem)
{
    if(tem!=NULL)
    {
        inord(tem->l);
        cout<<tem->data<<" ";
        inord(tem->r);
    }
}
void preord(struct node* tem)
{
    if(tem!=NULL)
    {
        cout<<tem->data<<" ";
        preord(tem->l);
        preord(tem->r);
    }
}
void psord(struct node* tem)
{
    if(tem!=NULL)
    {
        psord(tem->l);
        psord(tem->r);
        cout<<tem->data<<" ";
    }
}

void lvlord(struct node* tem)
{
    queue<struct node*> q;
    if(tem!=NULL)
    q.push(tem);
    else return;
    while(!q.empty())
    {
        y=q.front();
        cout<<y->data<<" ";
        if(y->l)
            q.push(y->l);
        if(y->r)
            q.push(y->r);
        q.pop();
    }
    cout<<nl;
}


void insrt(int d)
{
    nn=(struct node*)malloc(sizeof(struct node));
    nn->l=NULL;
    nn->r=NULL;
    nn->data=d;
    if(head==NULL)
    {
        head=nn;
        return;
    }
    temp=head;
    while(temp!=NULL)
    {
        y=temp;
        if(temp->data>d)
        {
            temp=temp->l;
        }
        else temp=temp->r;
    }
    
    if (y==NULL) 
        y=nn; 
  else if (d<y->data) 
        y->l=nn; 
    else
        y->r=nn; 
    
}

int height(struct node* tem)
{
    if(tem==NULL)
        return -1;
    return 1+max(height(tem->l),height(tem->r));
}


void solve()
{
    ll tt=1,n;
    cin>>tt;
    while(tt--)
    {
        head=NULL;
    ll p;
        cin>>n;
        f(i,0,n)
        {
            cin>>p;
            
            insrt(p);  
        }
     //cout<<height(head)<<nl;
    //preord(head);cout<<nl;
    //inord(head); cout<<nl;
    //psord(head); cout<<nl;
    //lvlord(head);
    //cout<<nl;
    
    }
    
}
 
int main()
{
    #ifdef JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    clock_t beg = clock();
    solve();
    clock_t end = clock();
    fprintf(stderr, "%.3f sec, Copyright %c 2019 PyThor. \n", double(end - beg) / CLOCKS_PER_SEC , 184);
    return 0;
}
